// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/repository/interfaces/authInterface.go

// Package mock is a generated GoMock package.
package mock

import (
	domain "clean/pkg/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAuthRepository is a mock of AuthRepository interface.
type MockAuthRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAuthRepositoryMockRecorder
}

// MockAuthRepositoryMockRecorder is the mock recorder for MockAuthRepository.
type MockAuthRepositoryMockRecorder struct {
	mock *MockAuthRepository
}

// NewMockAuthRepository creates a new mock instance.
func NewMockAuthRepository(ctrl *gomock.Controller) *MockAuthRepository {
	mock := &MockAuthRepository{ctrl: ctrl}
	mock.recorder = &MockAuthRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthRepository) EXPECT() *MockAuthRepositoryMockRecorder {
	return m.recorder
}

// AdminRegister mocks base method.
func (m *MockAuthRepository) AdminRegister(admin domain.Admins) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminRegister", admin)
	ret0, _ := ret[0].(error)
	return ret0
}

// AdminRegister indicates an expected call of AdminRegister.
func (mr *MockAuthRepositoryMockRecorder) AdminRegister(admin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminRegister", reflect.TypeOf((*MockAuthRepository)(nil).AdminRegister), admin)
}

// BlockUnblockUser mocks base method.
func (m *MockAuthRepository) BlockUnblockUser(user_id uint, val bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockUnblockUser", user_id, val)
	ret0, _ := ret[0].(error)
	return ret0
}

// BlockUnblockUser indicates an expected call of BlockUnblockUser.
func (mr *MockAuthRepositoryMockRecorder) BlockUnblockUser(user_id, val interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockUnblockUser", reflect.TypeOf((*MockAuthRepository)(nil).BlockUnblockUser), user_id, val)
}

// FindAdmin mocks base method.
func (m *MockAuthRepository) FindAdmin(username string) (domain.AdminResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAdmin", username)
	ret0, _ := ret[0].(domain.AdminResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAdmin indicates an expected call of FindAdmin.
func (mr *MockAuthRepositoryMockRecorder) FindAdmin(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAdmin", reflect.TypeOf((*MockAuthRepository)(nil).FindAdmin), username)
}

// FindUser mocks base method.
func (m *MockAuthRepository) FindUser(email string) (domain.UserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUser", email)
	ret0, _ := ret[0].(domain.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUser indicates an expected call of FindUser.
func (mr *MockAuthRepositoryMockRecorder) FindUser(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUser", reflect.TypeOf((*MockAuthRepository)(nil).FindUser), email)
}

// FindUserById mocks base method.
func (m *MockAuthRepository) FindUserById(user_id uint) (domain.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserById", user_id)
	ret0, _ := ret[0].(domain.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserById indicates an expected call of FindUserById.
func (mr *MockAuthRepositoryMockRecorder) FindUserById(user_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserById", reflect.TypeOf((*MockAuthRepository)(nil).FindUserById), user_id)
}

// Register mocks base method.
func (m *MockAuthRepository) Register(user domain.Users) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockAuthRepositoryMockRecorder) Register(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockAuthRepository)(nil).Register), user)
}

// StoreVerificationDetails mocks base method.
func (m *MockAuthRepository) StoreVerificationDetails(email string, code int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreVerificationDetails", email, code)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreVerificationDetails indicates an expected call of StoreVerificationDetails.
func (mr *MockAuthRepositoryMockRecorder) StoreVerificationDetails(email, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreVerificationDetails", reflect.TypeOf((*MockAuthRepository)(nil).StoreVerificationDetails), email, code)
}

// UpdateUserStatus mocks base method.
func (m *MockAuthRepository) UpdateUserStatus(email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserStatus", email)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserStatus indicates an expected call of UpdateUserStatus.
func (mr *MockAuthRepositoryMockRecorder) UpdateUserStatus(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserStatus", reflect.TypeOf((*MockAuthRepository)(nil).UpdateUserStatus), email)
}

// VerifyOtp mocks base method.
func (m *MockAuthRepository) VerifyOtp(email string, code int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyOtp", email, code)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyOtp indicates an expected call of VerifyOtp.
func (mr *MockAuthRepositoryMockRecorder) VerifyOtp(email, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyOtp", reflect.TypeOf((*MockAuthRepository)(nil).VerifyOtp), email, code)
}
