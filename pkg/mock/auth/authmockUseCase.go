// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/usecase/interfaces/authInterface.go

// Package mock is a generated GoMock package.
package mock

import (
	domain "clean/pkg/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAuthUseCase is a mock of AuthUseCase interface.
type MockAuthUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockAuthUseCaseMockRecorder
}

// MockAuthUseCaseMockRecorder is the mock recorder for MockAuthUseCase.
type MockAuthUseCaseMockRecorder struct {
	mock *MockAuthUseCase
}

// NewMockAuthUseCase creates a new mock instance.
func NewMockAuthUseCase(ctrl *gomock.Controller) *MockAuthUseCase {
	mock := &MockAuthUseCase{ctrl: ctrl}
	mock.recorder = &MockAuthUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthUseCase) EXPECT() *MockAuthUseCaseMockRecorder {
	return m.recorder
}

// AdminRegister mocks base method.
func (m *MockAuthUseCase) AdminRegister(admin domain.Admins) (domain.Admins, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminRegister", admin)
	ret0, _ := ret[0].(domain.Admins)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminRegister indicates an expected call of AdminRegister.
func (mr *MockAuthUseCaseMockRecorder) AdminRegister(admin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminRegister", reflect.TypeOf((*MockAuthUseCase)(nil).AdminRegister), admin)
}

// BlockUnblockUser mocks base method.
func (m *MockAuthUseCase) BlockUnblockUser(user_id uint, val bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockUnblockUser", user_id, val)
	ret0, _ := ret[0].(error)
	return ret0
}

// BlockUnblockUser indicates an expected call of BlockUnblockUser.
func (mr *MockAuthUseCaseMockRecorder) BlockUnblockUser(user_id, val interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockUnblockUser", reflect.TypeOf((*MockAuthUseCase)(nil).BlockUnblockUser), user_id, val)
}

// FindAdmin mocks base method.
func (m *MockAuthUseCase) FindAdmin(username string) (*domain.AdminResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAdmin", username)
	ret0, _ := ret[0].(*domain.AdminResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAdmin indicates an expected call of FindAdmin.
func (mr *MockAuthUseCaseMockRecorder) FindAdmin(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAdmin", reflect.TypeOf((*MockAuthUseCase)(nil).FindAdmin), username)
}

// FindUser mocks base method.
func (m *MockAuthUseCase) FindUser(email string) (domain.UserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUser", email)
	ret0, _ := ret[0].(domain.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUser indicates an expected call of FindUser.
func (mr *MockAuthUseCaseMockRecorder) FindUser(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUser", reflect.TypeOf((*MockAuthUseCase)(nil).FindUser), email)
}

// FindUserById mocks base method.
func (m *MockAuthUseCase) FindUserById(user_id uint) (domain.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserById", user_id)
	ret0, _ := ret[0].(domain.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserById indicates an expected call of FindUserById.
func (mr *MockAuthUseCaseMockRecorder) FindUserById(user_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserById", reflect.TypeOf((*MockAuthUseCase)(nil).FindUserById), user_id)
}

// Register mocks base method.
func (m *MockAuthUseCase) Register(user domain.Users) (domain.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", user)
	ret0, _ := ret[0].(domain.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockAuthUseCaseMockRecorder) Register(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockAuthUseCase)(nil).Register), user)
}

// SendVerificationEmail mocks base method.
func (m *MockAuthUseCase) SendVerificationEmail(email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendVerificationEmail", email)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendVerificationEmail indicates an expected call of SendVerificationEmail.
func (mr *MockAuthUseCaseMockRecorder) SendVerificationEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendVerificationEmail", reflect.TypeOf((*MockAuthUseCase)(nil).SendVerificationEmail), email)
}

// UpdateUserStatus mocks base method.
func (m *MockAuthUseCase) UpdateUserStatus(email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserStatus", email)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserStatus indicates an expected call of UpdateUserStatus.
func (mr *MockAuthUseCaseMockRecorder) UpdateUserStatus(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserStatus", reflect.TypeOf((*MockAuthUseCase)(nil).UpdateUserStatus), email)
}

// VerifyAdmin mocks base method.
func (m *MockAuthUseCase) VerifyAdmin(username, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyAdmin", username, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyAdmin indicates an expected call of VerifyAdmin.
func (mr *MockAuthUseCaseMockRecorder) VerifyAdmin(username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyAdmin", reflect.TypeOf((*MockAuthUseCase)(nil).VerifyAdmin), username, password)
}

// VerifyUser mocks base method.
func (m *MockAuthUseCase) VerifyUser(email, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyUser", email, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyUser indicates an expected call of VerifyUser.
func (mr *MockAuthUseCaseMockRecorder) VerifyUser(email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyUser", reflect.TypeOf((*MockAuthUseCase)(nil).VerifyUser), email, password)
}

// VerifyUserOtp mocks base method.
func (m *MockAuthUseCase) VerifyUserOtp(email string, code int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyUserOtp", email, code)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyUserOtp indicates an expected call of VerifyUserOtp.
func (mr *MockAuthUseCaseMockRecorder) VerifyUserOtp(email, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyUserOtp", reflect.TypeOf((*MockAuthUseCase)(nil).VerifyUserOtp), email, code)
}
